
### 1. **Control Flow Statements**

**Lesson 1: Conditional Logic (`if`, `else`, `else if`)**  
- **Project**: Age-based movie ticket pricing system.  
  **Details**: Write a program that takes the user's age as input and determines the ticket price. Implement `if-else` logic to categorize users as child, adult, or senior based on age and assign the ticket price accordingly.

**Lesson 2: `When` Expression**  
- **Project**: Day of the week schedule manager.  
  **Details**: Create a program that takes a day of the week as input and displays the user's schedule for that day using a `when` expression.

**Lesson 3: Loops (`for`, `while`, `do-while`)**  
- **Project**: Number pattern generator.  
  **Details**: Write a program that generates a triangular number pattern using a `for` loop. Expand it by using a `while` loop to let the user choose the number of rows dynamically.

---

### 2. **Functions in Kotlin**

**Lesson 4: Defining Functions**  
- **Project**: Simple math operation functions.  
  **Details**: Implement separate functions for addition, subtraction, multiplication, and division. Call these functions in the main program based on user input.

**Lesson 5: Higher-Order Functions**  
- **Project**: Discount calculator with custom strategies.  
  **Details**: Write a program that calculates discounts on a price using higher-order functions. Allow the user to pass different discount strategies (percentage or flat discount) as functions to the discount calculator.

**Lesson 6: Inline Functions**  
- **Project**: Optimized discount calculator with inline functions.  
  **Details**: Modify the above discount calculator to use inline functions for performance optimization, especially if the calculations are repeated in loops.

---

### 3. **Lambda Expressions**

**Lesson 7: Lambda Expressions**  
- **Project**: Even number filter with lambda.  
  **Details**: Create a list of numbers and use a lambda expression to filter out only even numbers. Print the filtered list.

**Lesson 8: Anonymous Functions**  
- **Project**: Sorting list using anonymous functions.  
  **Details**: Write a program that takes a list of integers and sorts them using an anonymous function within `sortedBy` or `sortedWith` for custom sorting logic.

---

### 4. **Collections in Kotlin**

**Lesson 9: Arrays and Lists**  
- **Project**: Student grade manager using arrays.  
  **Details**: Create a program to store students' grades in an array and calculate the class average. Extend it to use a mutable list to add/remove student grades dynamically.

**Lesson 10: Maps and Sets**  
- **Project**: Phonebook using maps.  
  **Details**: Implement a phonebook where names are keys and phone numbers are values. Allow users to add, search, and remove contacts. Also, prevent duplicate contact names using a set.

---

### 5. **Ranges in Kotlin**

**Lesson 11: Using Ranges**  
- **Project**: Range-based multiplication table generator.  
  **Details**: Write a program that uses ranges to generate and display a multiplication table for a number entered by the user.

---

### 6. **Classes and Objects**

**Lesson 12: Defining Classes and Creating Objects**  
- **Project**: Employee management system.  
  **Details**: Create an `Employee` class with properties like name, age, and salary. Write methods to increase/decrease salary and print employee details. Create objects for different employees and manage them.

**Lesson 13: Constructors (Primary and Secondary)**  
- **Project**: Bank account simulation with constructors.  
  **Details**: Implement a `BankAccount` class with primary and secondary constructors. Allow the user to create accounts with an initial balance or without a balance (using default values in the constructors).

---

### 7. **Inheritance in Kotlin**

**Lesson 14: Types of Inheritance (Single, Multilevel, Hierarchical)**  
- **Project**: School management system using inheritance.  
  **Details**:  
  - **Single Inheritance**: Create a `Person` class and extend it to a `Student` class. The `Student` class inherits properties and methods from `Person`.  
  - **Multilevel Inheritance**: Add a `GraduateStudent` class that extends `Student`, creating a three-level inheritance hierarchy.  
  - **Hierarchical Inheritance**: Create another class like `Teacher` that extends `Person`, demonstrating multiple subclasses inheriting from the same base class.

**Lesson 15: Multiple Inheritance via Interfaces**  
- **Project**: Multiple inheritance in zoo simulation.  
  **Details**: Create interfaces like `Carnivore` and `Herbivore`, and implement classes like `Lion` and `Deer` that inherit behavior from multiple interfaces.

---

### 8. **Abstract Classes**

**Lesson 16: Abstract Classes and Methods**  
- **Project**: Abstract shape class.  
  **Details**: Create an abstract class `Shape` with an abstract method `calculateArea()`. Implement specific shapes like `Circle` and `Square` that override the abstract method to calculate and return their respective areas.

---

### 9. **Interfaces**

**Lesson 17: Working with Interfaces**  
- **Project**: Zoo simulation with interfaces.  
  **Details**: Expand the zoo simulation by implementing `Carnivore` and `Herbivore` interfaces for animals. Write methods to define their eating behaviors. Override these methods in animal classes like `Lion` and `Elephant`.

---

### 10. **Visibility Modifiers**

**Lesson 18: Understanding Visibility Modifiers**  
- **Project**: Library management system with restricted access.  
  **Details**: Implement a class to manage books and authors. Use visibility modifiers (`private`, `protected`, `public`) to control access to methods. For example, only allow internal modification of book details while making other parts publicly accessible.

---

### 11. **Data Classes**

**Lesson 19: Data Classes in Kotlin**  
- **Project**: Contact management system with data classes.  
  **Details**: Create a `Contact` data class to store contact details like name, phone number, and email. Implement functionality to add, remove, and update contacts, showcasing the use of data class methods like `copy()` and `toString()`.

---

### 12. **Sealed Classes**

**Lesson 20: Sealed Classes**  
- **Project**: Handling API responses with sealed classes.  
  **Details**: Use a sealed class to represent different API response types (`Success`, `Error`, `Loading`). Create a function to simulate an API call and use a `when` expression to handle each response type.

---

### 13. **Generics in Kotlin**

**Lesson 21: Introduction to Generics**  
- **Project**: Generic sorting algorithm.  
  **Details**: Implement a generic function to sort a list of any data type (`Int`, `String`, `Double`). Use type parameters to ensure the function can handle multiple types.

---

### 14. **Companion Objects**

**Lesson 22: Companion Objects in Kotlin**  
- **Project**: Math utility class with companion object.  
  **Details**: Create a `MathUtils` class with a companion object containing static methods like `add()`, `subtract()`, and `multiply()`. Access these methods from the companion object directly without creating an instance of `MathUtils`.

---

### 15. **Exception Handling**

**Lesson 23: Exception Handling**  
- **Project**: Banking system with exception handling.  
  **Details**: Implement a banking system that throws and catches exceptions for situations like insufficient funds. Use `try-catch` blocks to handle different types of exceptions and ensure smooth execution.

---

### 16. **Coroutines in Kotlin**

**Lesson 24: Introduction to Coroutines**  
- **Project**: Weather app simulation using coroutines.  
  **Details**: Simulate fetching weather data from an API using coroutines. Use `launch` and `async` to handle tasks concurrently, such as fetching data and updating the UI.

---

### 17. **Delegates in Kotlin**

**Lesson 25: Property Delegation**  
- **Project**: Lazy loading simulation.  
  **Details**: Create a class that uses the `lazy` delegate to initialize a heavy computation only when it's needed. Demonstrate this by printing a message when the property is first accessed.

---

### 18. **Inner Classes and Nested Classes**

**Lesson 26: Nested and Inner Classes**  
- **Project**: Car and Engine simulation.  
  **Details**: Create a `Car` class with a nested `Engine` class. Implement methods to start and stop the engine, accessing the engine's details through the car object.

---

### 19. **Overriding and Overloading**

**Lesson 27: Method Overriding and Overloading**  
- **Project**: Payroll system with overridden methods.  
  **Details**: Implement a `Payroll` system with classes like `FullTimeEmployee` and `PartTimeEmployee`. Override methods like `calculateSalary()` to provide custom logic for different employee types. Use method overloading to allow salary calculation based on different parameters.

---

### 20. **Abstract Classes vs Interfaces**

**Lesson 28: Understanding Abstract Classes vs Interfaces**  
- **Project**: Vehicle management system with abstract classes and interfaces.  
  **Details**: Implement a vehicle management system where `Vehicle` is an

 abstract class, and interfaces like `FuelBased` and `ElectricBased` define fuel-specific behavior. Create classes for `Car`, `Bike`, and `ElectricScooter` to illustrate differences between abstract classes and interfaces.
